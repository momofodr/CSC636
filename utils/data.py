"""prepare CIFAR and SVHN
"""

from __future__ import print_function

import torch
import torchvision
import torchvision.transforms as transforms
import numpy as np
from .writing_dataset import ImageDataset


crop_size = 32
padding = 4


def prepare_train_data(dataset='cifar10', labels = [], datadir='/home/yf22/dataset', batch_size=128,
                       shuffle=True, num_workers=4):
# dataset will be an array of frames generated by cv2, labels is an array of 0 and 1

    if 'writing' in dataset:
        transform_train = transforms.Compose([

            transforms.Resize((128,128)),
            transforms.RandomHorizontalFlip(),
            transforms.ToTensor(),
            transforms.Normalize((0.5, 0.5, 0.5),
                                 (0.5, 0.5, 0.5))
        ])

        trainset = ImageDataset(root=datadir, labels_ = labels, transforms_=transform_train, mode='train')
        train_loader = torch.utils.data.DataLoader(trainset,
                                                   batch_size=batch_size,
                                                   shuffle=shuffle,
                                                   num_workers=num_workers)
    else:
        train_loader = None
    return train_loader


def prepare_test_data(dataset='cifar10', labels = [], datadir='/home/yf22/dataset', batch_size=128,
                      shuffle=False, num_workers=4):

    if 'writing' in dataset:
        transform_test = transforms.Compose([

            transforms.Resize((128,128)),
            transforms.ToTensor(),
            transforms.Normalize((0.5, 0.5, 0.5),
                                 (0.5, 0.5, 0.5))
        ])

        testset = ImageDataset(root=datadir, transforms_=transform_test, mode='test')
        test_loader = torch.utils.data.DataLoader(testset,
                                                   batch_size=batch_size,
                                                   shuffle=shuffle,
                                                   num_workers=num_workers)
    else:
        test_loader = None
    return test_loader
